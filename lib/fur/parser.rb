# Autogenerated from a Treetop grammar. Edits may be lost.


module Fur
  module Grammar
    include Treetop::Runtime

    def root
      @root ||= :tree
    end

    def _nt_tree
      start_index = index
      if node_cache[:tree].has_key?(index)
        cached = node_cache[:tree][index]
        if cached
          node_cache[:tree][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        i1 = index
        r2 = _nt_pexp
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r1 = r2
        else
          r3 = _nt_exp
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r1 = r3
          else
            @index = i1
            r1 = nil
          end
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(Tree,input, i0...index, s0)
      end

      node_cache[:tree][start_index] = r0

      r0
    end

    module Pexp0
      def body
        elements[1]
      end

    end

    def _nt_pexp
      start_index = index
      if node_cache[:pexp].has_key?(index)
        cached = node_cache[:pexp][index]
        if cached
          node_cache[:pexp][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if (match_len = has_terminal?('(', false, index))
        r1 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r1 = nil
      end
      s0 << r1
      if r1
        i2 = index
        r3 = _nt_pexp
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r2 = r3
        else
          r4 = _nt_body
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r2 = r4
          else
            @index = i2
            r2 = nil
          end
        end
        s0 << r2
        if r2
          if (match_len = has_terminal?(')', false, index))
            r5 = true
            @index += match_len
          else
            terminal_parse_failure('\')\'')
            r5 = nil
          end
          s0 << r5
        end
      end
      if s0.last
        r0 = instantiate_node(Exp,input, i0...index, s0)
        r0.extend(Pexp0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:pexp][start_index] = r0

      r0
    end

    module Exp0
      def body
        elements[0]
      end

    end

    def _nt_exp
      start_index = index
      if node_cache[:exp].has_key?(index)
        cached = node_cache[:exp][index]
        if cached
          node_cache[:exp][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_body
      s0 << r1
      if r1
        r3 = _nt_terminator
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(Exp,input, i0...index, s0)
        r0.extend(Exp0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:exp][start_index] = r0

      r0
    end

    def _nt_body
      start_index = index
      if node_cache[:body].has_key?(index)
        cached = node_cache[:body][index]
        if cached
          node_cache[:body][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_list
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        r2 = _nt_function
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
        else
          r3 = _nt_exec
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r0 = r3
          else
            r4 = _nt_string
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r0 = r4
            else
              r5 = _nt_integer
              if r5
                r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                r0 = r5
              else
                r6 = _nt_boolean
                if r6
                  r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                  r0 = r6
                else
                  r7 = _nt_identifier
                  if r7
                    r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                    r0 = r7
                  else
                    r8 = _nt_space
                    if r8
                      r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                      r0 = r8
                    else
                      @index = i0
                      r0 = nil
                    end
                  end
                end
              end
            end
          end
        end
      end

      node_cache[:body][start_index] = r0

      r0
    end

    module Function0
      def name
        elements[0]
      end

      def params
        elements[1]
      end

      def body
        elements[3]
      end

    end

    def _nt_function
      start_index = index
      if node_cache[:function].has_key?(index)
        cached = node_cache[:function][index]
        if cached
          node_cache[:function][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1 = index
      if (match_len = has_terminal?('->', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'->\'')
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r1 = r2
      else
        r3 = _nt_identifier
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      s0 << r1
      if r1
        s4, i4 = [], index
        loop do
          i5 = index
          r6 = _nt_space
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r5 = r6
          else
            r7 = _nt_param
            if r7
              r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
              r5 = r7
            else
              @index = i5
              r5 = nil
            end
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
        if r4
          if (match_len = has_terminal?('{', false, index))
            r8 = true
            @index += match_len
          else
            terminal_parse_failure('\'{\'')
            r8 = nil
          end
          s0 << r8
          if r8
            r10 = _nt_tree
            if r10
              r9 = r10
            else
              r9 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r9
            if r9
              if (match_len = has_terminal?('}', false, index))
                r11 = true
                @index += match_len
              else
                terminal_parse_failure('\'}\'')
                r11 = nil
              end
              s0 << r11
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(Function,input, i0...index, s0)
        r0.extend(Function0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:function][start_index] = r0

      r0
    end

    module Exec0
      def name
        elements[0]
      end

      def args
        elements[1]
      end

    end

    def _nt_exec
      start_index = index
      if node_cache[:exec].has_key?(index)
        cached = node_cache[:exec][index]
        if cached
          node_cache[:exec][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_identifier
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3 = index
          r4 = _nt_pexp
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r3 = r4
          else
            r5 = _nt_list
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r3 = r5
            else
              r6 = _nt_function
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r3 = r6
              else
                r7 = _nt_string
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r3 = r7
                else
                  r8 = _nt_integer
                  if r8
                    r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                    r3 = r8
                  else
                    r9 = _nt_boolean
                    if r9
                      r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                      r3 = r9
                    else
                      r10 = _nt_identifier
                      if r10
                        r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                        r3 = r10
                      else
                        r11 = _nt_space
                        if r11
                          r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                          r3 = r11
                        else
                          @index = i3
                          r3 = nil
                        end
                      end
                    end
                  end
                end
              end
            end
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          if (match_len = has_terminal?('!', false, index))
            r12 = true
            @index += match_len
          else
            terminal_parse_failure('\'!\'')
            r12 = nil
          end
          s0 << r12
        end
      end
      if s0.last
        r0 = instantiate_node(Exec,input, i0...index, s0)
        r0.extend(Exec0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:exec][start_index] = r0

      r0
    end

    module List0
      def members
        elements[1]
      end

    end

    def _nt_list
      start_index = index
      if node_cache[:list].has_key?(index)
        cached = node_cache[:list][index]
        if cached
          node_cache[:list][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if (match_len = has_terminal?('[', false, index))
        r1 = true
        @index += match_len
      else
        terminal_parse_failure('\'[\'')
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3 = index
          r4 = _nt_pexp
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r3 = r4
          else
            r5 = _nt_list
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r3 = r5
            else
              r6 = _nt_string
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r3 = r6
              else
                r7 = _nt_integer
                if r7
                  r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                  r3 = r7
                else
                  r8 = _nt_boolean
                  if r8
                    r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                    r3 = r8
                  else
                    r9 = _nt_identifier
                    if r9
                      r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                      r3 = r9
                    else
                      r10 = _nt_space
                      if r10
                        r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                        r3 = r10
                      else
                        @index = i3
                        r3 = nil
                      end
                    end
                  end
                end
              end
            end
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          if (match_len = has_terminal?(']', false, index))
            r11 = true
            @index += match_len
          else
            terminal_parse_failure('\']\'')
            r11 = nil
          end
          s0 << r11
        end
      end
      if s0.last
        r0 = instantiate_node(List,input, i0...index, s0)
        r0.extend(List0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:list][start_index] = r0

      r0
    end

    module String0
      def body
        elements[1]
      end

    end

    def _nt_string
      start_index = index
      if node_cache[:string].has_key?(index)
        cached = node_cache[:string][index]
        if cached
          node_cache[:string][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if (match_len = has_terminal?('"', false, index))
        r1 = true
        @index += match_len
      else
        terminal_parse_failure('\'"\'')
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[^"]'] ||= Regexp.new(gr), :regexp, index)
            r3 = true
            @index += 1
          else
            terminal_parse_failure('[^"]')
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          if (match_len = has_terminal?('"', false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('\'"\'')
            r4 = nil
          end
          s0 << r4
        end
      end
      if s0.last
        r0 = instantiate_node(String,input, i0...index, s0)
        r0.extend(String0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:string][start_index] = r0

      r0
    end

    def _nt_integer
      start_index = index
      if node_cache[:integer].has_key?(index)
        cached = node_cache[:integer][index]
        if cached
          node_cache[:integer][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[\\d]'] ||= Regexp.new(gr), :regexp, index)
          r1 = true
          @index += 1
        else
          terminal_parse_failure('[\\d]')
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(Integer,input, i0...index, s0)
      end

      node_cache[:integer][start_index] = r0

      r0
    end

    module Identifier0
    end

    def _nt_identifier
      start_index = index
      if node_cache[:identifier].has_key?(index)
        cached = node_cache[:identifier][index]
        if cached
          node_cache[:identifier][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1 = index
      r2 = _nt_reserved
      if r2
        @index = i1
        r1 = nil
      else
        @index = i1
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        s3, i3 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[a-zA-Z]'] ||= Regexp.new(gr), :regexp, index)
            r4 = true
            @index += 1
          else
            terminal_parse_failure('[a-zA-Z]')
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.empty?
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        s0 << r3
        if r3
          s5, i5 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[\\w\\-_]'] ||= Regexp.new(gr), :regexp, index)
              r6 = true
              @index += 1
            else
              terminal_parse_failure('[\\w\\-_]')
              r6 = nil
            end
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
        end
      end
      if s0.last
        r0 = instantiate_node(Identifier,input, i0...index, s0)
        r0.extend(Identifier0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:identifier][start_index] = r0

      r0
    end

    module Boolean0
    end

    def _nt_boolean
      start_index = index
      if node_cache[:boolean].has_key?(index)
        cached = node_cache[:boolean][index]
        if cached
          node_cache[:boolean][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if (match_len = has_terminal?('#', false, index))
        r1 = true
        @index += match_len
      else
        terminal_parse_failure('\'#\'')
        r1 = nil
      end
      s0 << r1
      if r1
        i2 = index
        if (match_len = has_terminal?('t', false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('\'t\'')
          r3 = nil
        end
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r2 = r3
        else
          if (match_len = has_terminal?('f', false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('\'f\'')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r2 = r4
          else
            @index = i2
            r2 = nil
          end
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(Boolean,input, i0...index, s0)
        r0.extend(Boolean0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:boolean][start_index] = r0

      r0
    end

    module Param0
    end

    module Param1
      def name
        elements[0]
      end

      def tag
        elements[2]
      end
    end

    def _nt_param
      start_index = index
      if node_cache[:param].has_key?(index)
        cached = node_cache[:param][index]
        if cached
          node_cache[:param][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1, s1 = index, []
      i2 = index
      r3 = _nt_reserved
      if r3
        @index = i2
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        s4, i4 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[a-zA-Z]'] ||= Regexp.new(gr), :regexp, index)
            r5 = true
            @index += 1
          else
            terminal_parse_failure('[a-zA-Z]')
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s1 << r4
        if r4
          s6, i6 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[\\w\\-_]'] ||= Regexp.new(gr), :regexp, index)
              r7 = true
              @index += 1
            else
              terminal_parse_failure('[\\w\\-_]')
              r7 = nil
            end
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s1 << r6
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(Param0)
      else
        @index = i1
        r1 = nil
      end
      s0 << r1
      if r1
        if (match_len = has_terminal?(':', false, index))
          r8 = true
          @index += match_len
        else
          terminal_parse_failure('\':\'')
          r8 = nil
        end
        s0 << r8
        if r8
          r9 = _nt_tag
          s0 << r9
        end
      end
      if s0.last
        r0 = instantiate_node(Param,input, i0...index, s0)
        r0.extend(Param1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:param][start_index] = r0

      r0
    end

    def _nt_reserved
      start_index = index
      if node_cache[:reserved].has_key?(index)
        cached = node_cache[:reserved][index]
        if cached
          node_cache[:reserved][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      if (match_len = has_terminal?('(', false, index))
        r1 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r1 = nil
      end
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        if (match_len = has_terminal?(')', false, index))
          r2 = true
          @index += match_len
        else
          terminal_parse_failure('\')\'')
          r2 = nil
        end
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
        else
          if (match_len = has_terminal?('{', false, index))
            r3 = true
            @index += match_len
          else
            terminal_parse_failure('\'{\'')
            r3 = nil
          end
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r0 = r3
          else
            if (match_len = has_terminal?('}', false, index))
              r4 = true
              @index += match_len
            else
              terminal_parse_failure('\'}\'')
              r4 = nil
            end
            if r4
              r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
              r0 = r4
            else
              if (match_len = has_terminal?('!', false, index))
                r5 = true
                @index += match_len
              else
                terminal_parse_failure('\'!\'')
                r5 = nil
              end
              if r5
                r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                r0 = r5
              else
                r6 = _nt_boolean
                if r6
                  r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                  r0 = r6
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end
      end

      node_cache[:reserved][start_index] = r0

      r0
    end

    def _nt_tag
      start_index = index
      if node_cache[:tag].has_key?(index)
        cached = node_cache[:tag][index]
        if cached
          node_cache[:tag][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[a-z]'] ||= Regexp.new(gr), :regexp, index)
          r1 = true
          @index += 1
        else
          terminal_parse_failure('[a-z]')
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      end

      node_cache[:tag][start_index] = r0

      r0
    end

    def _nt_terminator
      start_index = index
      if node_cache[:terminator].has_key?(index)
        cached = node_cache[:terminator][index]
        if cached
          node_cache[:terminator][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?(@regexps[gr = '\A[;\\n]'] ||= Regexp.new(gr), :regexp, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('[;\\n]')
        r0 = nil
      end

      node_cache[:terminator][start_index] = r0

      r0
    end

    def _nt_space
      start_index = index
      if node_cache[:space].has_key?(index)
        cached = node_cache[:space][index]
        if cached
          node_cache[:space][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[\\s\\t\\n\\r]'] ||= Regexp.new(gr), :regexp, index)
          r1 = true
          @index += 1
        else
          terminal_parse_failure('[\\s\\t\\n\\r]')
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(Space,input, i0...index, s0)
      end

      node_cache[:space][start_index] = r0

      r0
    end

  end

  class GrammarParser < Treetop::Runtime::CompiledParser
    include Grammar
  end

end
