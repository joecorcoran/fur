grammar Fur
  rule tree
    (pexp / exp)+ <Tree>
  end

  rule pexp
    '(' body:(pexp / body) ')' <Exp>
  end

  rule exp
    body:body terminator? <Exp>
  end

  rule body
    function / exec / string / integer / identifier / space
  end

  rule function
    name:('->' / identifier) params:(space / param)* '{' body:tree '}' <Function>
  end

  rule exec
    name:identifier args:(pexp / function / string / integer / identifier / space)* '!' <Exec>
  end

  rule string
    '"' body:[^"]* '"' <String>
  end

  rule integer
    [\d]+ <Integer>
  end

  rule identifier
    !reserved [a-zA-Z]+ [\w\-_]* <Identifier>
  end

  rule param
    name:(!reserved [a-zA-Z]+ [\w\-_]*) ':' tag:tag <Param>
  end

  rule reserved
    '(' / ')' / '{' / '}' / '!' / tag
  end

  rule tag
    'int' / 'str' / 'fun'
  end

  rule terminator
    [;\n]
  end

  rule space
    [\s\t\n\r]+ <Space>
  end
end
